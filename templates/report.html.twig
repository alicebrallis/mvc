{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <h1>Kmom01</h1>
<h5>Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering.
</h5>
<p>Jag har tidigare läst en kurs i objektorienterad programmering med Python (OOPython). Under kursen lärde jag mig grunderna i objektorientering, inklusive skapande av klasser och objekt, arv, inkapsling. Jag har även använt Python för att skapa och använda egna klasser och objekt i olika projekt. Jag har en grundläggande förståelse för hur OOP fungerar och hur det kan användas för att skapa strukturerad och återanvändbar kod.</p>
<h5>Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver veta/förstå för att kunna komma igång och skapa sina första klasser?</h5>
<p>I PHP, används klasser som mallar för att skapa objekt. Objekt är som enheter som kan utföra handlingar och lagra information. Klasser innehåller variabler (egenskaper) och funktioner (metoder) som objekt kan använda. En konstruktor används för att konfigurera objektet när det skapas. Med dessa grundläggande begrepp kan man komma igång med att skapa dina egna klasser och objekt i PHP för att organisera och strukturera din kod.</p>
<h5>Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?</h5>
<p>Strukturen i uppgiften "me/report" verkar vara välorganiserad med användning av Symfony-ramverket. Genom att placera kärnkoden och logiken i src-mappen hålls den bort från den offentliga webbåtkomsten, som är public-mappen. Detta är en säkerhetsåtgärd för att skydda känslig kod och data.</p>
<h5>Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och värdefulla? Är det några särskilda områden som du känner att du vill veta mer om? Lyft fram några delar av artikeln som du känner mer värdefulla.
</h5>
<p>PHP är ett programmeringsspråk som används för att bygga och hantera olika typer av webbapplikationer och program. Med PHP kan du organisera din kod på ett strukturerat sätt genom att använda objektorienterad programmering. Det innebär att du kan skapa återanvändbara "objekt" och använda dem för att utföra olika uppgifter.

PHP stöder också funktionell programmering, vilket låter dig använda funktioner på flexibla sätt. Till exempel kan du använda en funktion som om den vore en variabel eller låta funktioner interagera med varandra. Det tycker jag var mest värdefullt.</p>
<h5>Vilken är din TIL för detta kmom?</h5>
<p>Jag har börjat bygga upp strukturen för min webbapplikation och förstått hur man hanterar webbsidor och innehåll.

Jag tänker att nästa steg kan vara att utforska mer avancerade saker som objektorienterad programmering, hur man arbetar med databaser och hur man designar användargränssnitt. </p>


<h1>Kmom02</h1>
<h5>Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.</h5>
<p>
I objektorienterad programmering används arv, komposition, interface och trait för att organisera och strukturera kod. Arv tillåter en klass att ärva egenskaper och metoder från en annan klass, vilket främjar återanvändning av kod och skapar hierarkier. Komposition innebär att en klass innehåller objekt av andra klasser, vilket ger flexibilitet i att sätta samman funktionalitet.

Interface definierar en kontrakt för klasser genom att specificera vilka metoder som måste implementeras. Det gör det enklare att byta ut eller lägga till nya klasser. Trait är en återanvändbar grupp av metoder som kan användas i olika klasser och ger en mekanism för horisontell återanvändning av kod.</p>

<h5>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?</h5>
<p>I min implementation för uppgiften använde jag mig av arv och interface. Jag skapade en grundläggande Card-klass och en Deck-klass som ärver från Card. Dessutom implementerade jag ett interface, SessionInterface, för att hantera sessionen och upprätthålla en deck i sessionen.

Jag är nöjd med min kod, men det finns alltid möjlighet till förbättring. Jag kan se att jag skulle kunna använda trait för att återanvända viss funktionalitet i olika klasser, vilket skulle göra koden ännu mer modulär.

</p>

<h5>Vilka är dina reflektioner så här långt med att jobb i Symfony med applikationskod enligt MVC?</h5>
<p>Att jobba med Symfony och MVC har gett mig en bra struktur för att organisera och separera olika delar av koden. Det underlättar hanteringen och gör koden mer läsbar och underhållbar.</p>

<h5>Vilken är din TIL för detta kmom?</h5>
<p>Att använda komposition och interface i kombination ger en flexibel och modulär kodstruktur i Symfony-projekt.</p>

<h1>Kmom03</h1>
<h5>Berätta hur det kändes att modellera ett kortspel med flödesdiagram och psuedokod. Var det något som du tror stödjer dig i din problemlösning och tankearbete för att strukturera koden kring en applikation?</h5>
<p>Modelleringen av kortspelet med flödesdiagram och pseudokod var en givande upplevelse. Det hjälpte mig att tydligt visualisera spelets logik och flöde innan jag började implementera det. Genom att skapa dessa modeller kunde jag bättre förstå spelets olika delar och identifiera potentiella problemområden innan jag började koda.</p>
<h5>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden, dina klasser och applikationen som helhet?</h5>
<p>Jag skapade en webbapplikation med Symfony för att spela kortspelet 21. Jag skapade olika klasser för kort, kortlek och spelare. Trots det är jag inte helt nöjd med resultatet. Jag stötte på problem med att organisera koden och implementera viss funktionalitet på det sätt jag hade tänkt från början. Koden kunde ha varit mer strukturerad och lättare att följa. Förbättringspotentialen ligger främst i att göra koden mer modulär och lättare att förstå.
Förbättringspotentialen i min kod ligger främst i att strukturera om koden för att göra den mer modulär och lättare att förstå. </p>
<h5>Vilken är din känsla för att koda i ett ramverk som Symfony, så här långt in i kursen?
</h5>
<p>
Hittills har min upplevelse av att arbeta med Symfony varit bra. Ramverket har många användbara verktyg och funktioner som gör det enklare att utveckla webbapplikationer och följa bästa praxis. Jag gillar speciellt att Symfony har en tydlig struktur och omfattande dokumentation, vilket gör det lättare att förstå och använda.</p>
<h5>Vilken är din TIL för detta kmom? </h5>
<p>Under detta kursmoment lärde jag mig vikten av att modellera och planera min kod innan jag börjar implementera den. Att använda flödesdiagram och pseudokod hjälpte mig att skapa en klar struktur och förståelse för problemet innan jag hoppade in i kodningen. Detta har hjälpt mig att arbeta mer effektivt och undvika vanliga misstag när jag utvecklar applikationer.</p>


<h1>Kmom04</h1>
<h5>Berätta hur du upplevde att skriva kod som testar annan kod med PHPUnit och hur du upplever phpunit rent allmänt.</h5>
<p>Jag tyckte det var spännande att testa koden som jag skrivit. Det fick mig att se på koden annorlunda och med ett kritiskt öga. 
Tyckte det var intressant då det fick mig att inse brister i koden som jag nog inte hade upptäckt annars. Php unit känns som ett bra 
testverktyg och jag uppskattar verkligen coverage rapporten som generas av verktyget. Att analysera och kolla igenom den hjälpte mig
förstå vad testerna täckte. </p>
<h5>Hur väl lyckades du med kodtäckningen av din kod, lyckades du nå mer än 90% kodtäckning?</h5>
<p>Jag lyckades att uppnå 100% kodtäckning, vilket var roligt men tog lång tid. Det var mycket trial and error på vägen dit.  </p>
<h5>Upplever du din egen kod som “testbar kod” eller finns det delar i koden som är mer eller mindre testbar och finns det saker som kan göras för att förbättra kodens testbarhet?</h5>
<p>Det finns delar i min kod som är testbara och det finns delar som inte är speciellt testbara. Upplevde att det var svårt att testa enskilda enheter i koden separat på grund av starka beroenden
till andra komponenter. För att göra koden mer testbar hade jag kunnat omstrukturera koden lite för minska beroenden och göra den mer modulär.
Sammanfattningvis finns det utrymme för förnättring när det gäller kodens testbarhet.  </p>
<h5>Valde du att skriva om delar av din kod för att förbättra den eller göra den mer testbar, om så berätta lite hur du tänkte.</h5>
<p>Nej, jag har inte genomfört stora ändringar i koden för att förbättra dess testbarhet. Jag inser dock att det finns
utrymme för förbättringar på den fronten. En del av koden är ganska komplex och har sammanflätande beroenden, vilket gör det
svårt att skriva effektiva enhetstester. Om jag skulle göra ändringar hade det varit att göra den mer modulär. Det hade nog ökat kodens stabilitet och tillförlitlighet.</p>
<h5>Fundera över om du anser att testbar kod är något som kan identifiera “snygg och ren kod”.</h5>
<p>Ja, jag anser att testbar kod är en indikator på snygg och ren kod. Jag tänker att testbar kod är modulär, tydlig och välstrukturerad eftersom 
det är lättare att skriva tester för en sån typ av kod. Genom att skriva enhetsteser så bryts koden ned i mindre
enheter och klara ansvarsområden, vilket leder till mer underhållbar kod. Jag skulle säga att testbar kod är nog synonymt med snygg och ren kod eftersom båda egenskaperna främjar kvalité.</p>
<h5>Vilken är din TIL för detta kmom?</h5>
<p>Mitt TIL för detta kmom är att testbar kod är viktigt för att upprätthålla en kod av kvalité. Genom att skriva enhetsteserna så kan man
säkerhetsställa att koden fungerar som förväntat. Testningen främjar också en bättre praxis som exempelvis modulär kod, tydlig struktur, lättläslighet, vilket i sin tur 
leder till en mer robust och hållbar kodbas.</p>


<h1>kmom05</h1>
<h5>Gick det bra att jobba igenom övningen med Symfony och Doctrine. Något särskilt du tänkte/reagerade på under övningen?
</h5>
<p>Ja, det gick bra att jobba igenom övningen med Symfony och Doctrine. Det var en givande upplevelse att arbeta med dessa ramverk för att skapa en applikation med CRUD-funktionalitet för en boklista. Jag fann Symfony och Doctrine vara kraftfulla verktyg som gör det relativt enkelt att bygga och hantera webbapplikationer.</p>
<h5>Berätta om din applikation och hur du tänkte när du byggde upp den. Tänkte du något speciellt på användargränssnittet?</h5>
<p> När jag skapade applikationen ville jag att den skulle vara enkel och lätt att använda. Jag använde Twig-templating för att göra användargränssnittet snyggt och tydligt. Jag försökte att hålla allt enhetligt så att det var lätt att förstå för användarna.</p>
<h5>Gick det bra att jobba med ORM i CRUD eller vad anser du om det, jämför gärna med andra sätt att jobba med databaser?
</h5>
<p>Det var smidigt att jobba med ORM i CRUD. Doctrine ORM gör det enkelt att jobba med databaser genom att använda vanliga PHP-objekt. Det sparar tid och gör koden mer läsbar.</p>
<h5>Vad är din uppfattning om ORM så här långt och relatera gärna till andra sätt att jobba med applikationskod mot databaser?</h5>
<p> Jag tycker att ORM är bra. Det gör att man kan jobba med databaser på ett mer naturligt sätt utan att behöva skriva SQL-frågor. Jämfört med att använda SQL direkt, tycker jag att ORM är mer användarvänligt och enklare.</p>
<h5>Vilken är din TIL för detta kmom?</h5>
<p> En viktig sak jag lärde mig är hur användbart det är att använda Symfony och Doctrine för att bygga webbapplikationer snabbt och enkelt. Dessa verktyg gör utvecklingsprocessen smidigare och låter mig fokusera mer på att bygga själva applikationen istället för att hantera databasen.
</p>

<h1>Kmom06</h1>
<h5>Hur uppfattade du verktyget phpmetrics och fann du några särskilda bitar mer värdefulla än andra? Var det några särskilda metrics eller bilder du uppskattade?</h5>
<p>Jag uppfattade phpmetrics som ett användbart verktyg för att analysera kodens kvalitet och komplexitet. Jag fann särskilt rapporterna om kodkomplexitet och kodduplikationer mer värdefulla än andra, eftersom de gav insikter om områden där koden kan förbättras.
</p>
<h5>Berätta hur det gick att integrera med Scrutinizer och vilken är din första känsla av verktyget och dess badges? Vilken kodtäckning och kodkvalitet fick du efter första bygget?</h5>
<p>Integreringen med Scrutinizer gick smidigt och badgesen ger en snabb överblick över kodens kvalitet och kodtäckning. Min första känsla av verktyget och dess badges är positiv, eftersom de ger användbar feedback på kodens hälsa och kvalitet efter varje bygg.
Efter första bygget fick jag kodkvalité 9.45 och kodtäckning 17.6%. </p>
<h5>Hur är din egen syn på kodkvalitet, berätta lite om den? Tror du man kan man påvisa kodkvalitet i någon viss mån med badges eller vad tror du?</h5>
<p>Min syn på kodkvalitet är att det handlar om att skriva läsbar, effektiv och lättunderhållen kod. Det är viktigt att sträva efter tydlighet, modularitet och att undvika onödiga komplexiteter. Badges kan vara användbara för att ge en snabb indikation på kodens kvalitet, men de är inte en fullständig indikator och bör kompletteras med en djupare analys.</p>
<h5>Vilken är din TIL för detta kmom?</h5>
<p>Min TIL för detta kmom är att användningen av verktyg som phpmetrics och Scrutinizer kan ge värdefull insikt och feedback för att förbättra kodens kvalitet och prestanda. Det är viktigt att kontinuerligt använda sådana verktyg för att upprätthålla och förbättra kodbasens kvalitet.</p>
{% endblock %}